<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAABAAAAARAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAcAAAA5AAAADgAAAAAAAAArAAAAZQAAAIgAAACjAAAAoAAAAIgAAABCAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAkAAAB5AAAA6gAAAP8AAAD8AAAA1AAAAJwAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuAAAAewAA
        AAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAA5AAAA3AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAACVAAAA3QAAADoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAANQAAAPkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADRAAAABwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAACvAAAA+QAAAF4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AP8AAADqAAAAKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABDAAAAJAAAAC4AAADOAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOUAAAAHAAAAVQAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAA7QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAAsAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/QAAAKAAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAACzAAAA3wAA
        AN0AAADJAAAAowAAAGkAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////8P///xAf//wD4//4A/H/8APw//AB+H/AAHA/gAAgH5wAIB8fA
        AAfHwAAHz8AAB8/AAAfPwAAHj4AAB4cAHAOAAH4DwAD/g8AA/wPAAP8DwAB+B+IAfgfgAHwP8AAAD/+A
        AB//4AA///AA///4Af//+Af///////////8=
</value>
  </data>
</root>